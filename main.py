import asyncio
import os
from dotenv import load_dotenv
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from keyboards import *
from JSONDATABASE import JsonDataLoader
from MySQLDatabase import DatabaseManager
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
import time
from aiogram import F
import json


class CleaningFSM(StatesGroup):
    choose_building = State() 
    
    #–ü–ï–†–í–´–ô –ê–î–†–ï–°
    floor_1_corridor = State()
    floor_1_restroom = State()
    floor_2_corridor = State()
    floor_2_restroom = State()
    stairsl1 = State()

    #–í–¢–û–†–û–ô –ê–î–†–ï–°
    room_1 = State()
    room_6 = State()
    restroom = State()
    stairsl2 = State()
    corridor = State()

    additional_photo=State()


    consumabels = State()

    order = State()
    order_amount = State()

    toRepair = State()
    repair_photo = State()

    final = State()


def format_strings_as_column(strings):

    return  "\n".join(strings) + "\n"

load_dotenv()

token = os.getenv("TOKEN")

logging.basicConfig(level=logging.INFO)

loader = JsonDataLoader("./objects.json")
objects = loader.get_data()

db_manager = DatabaseManager("example.db")


bot = Bot(token=token)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not await db_manager.get_user_by_telegram_id(message.from_user.id):
        await message.answer(
            "Please share your phone number to continue.", 
            reply_markup=phone_request_keyboard
        )
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=start_cleaning_button())

@dp.message(lambda message: message.contact)
async def handle_contact(message: types.Message):
    if message.contact.user_id == message.from_user.id:
        await db_manager.add_user(message.contact.phone_number, message.from_user.id)
        await message.answer("Thank you! You are now verified.", reply_markup=start_cleaning_button())
    else:
        await message.answer("Please share your own phone number.")

@dp.message(F.text == "–ù–∞—á–∞—Ç—å —É–±–æ—Ä–∫—É")
async def handle_start_cleaning(message: types.Message, state: FSMContext):
    current_datetime = datetime.now()
    formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M:%S")
    await state.update_data(startTime = formatted_datetime)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è —É–±–æ—Ä–∫–∏:", reply_markup=building_keyboard())
    await state.set_state(CleaningFSM.choose_building) 

# @dp.message()
# async def fallback(message: types.Message):
#     if not await db_manager.get_user_by_telegram_id(message.from_user.id):
#         await message.answer(
#             "You need to share your phone number to use this bot.", 
#             reply_markup=phone_request_keyboard
#         )


#–í–´–ë–û–† –ê–î–†–ï–°–ê
@dp.message(CleaningFSM.choose_building)
async def choose_building_handler(message: types.Message, state: FSMContext):
    chosen_building = message.text

    await state.update_data(chosen_building=chosen_building)
    
    if chosen_building == "–ü—è—Ç–Ω–∏—Ü–∫–∞—è, 7A":
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ—Ä–∏–¥–æ—Ä–∞ 1 —ç—Ç–∞–∂–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=skip_keyboard())
        await state.set_state(CleaningFSM.floor_1_corridor)
    elif chosen_building == "–°–≤–æ–±–æ–¥—ã, 95–∫2":
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ–º–Ω–∞—Ç—ã ‚Ññ1. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=skip_keyboard())
        await state.set_state(CleaningFSM.room_1)

#–§–û–¢–û–ì–†–ê–§–ò–ò
#–ü–ï–†–í–´–ô –ê–î–†–ï–°
@dp.message(CleaningFSM.floor_1_corridor)
async def location_1_f1c(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_1_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.floor_1_restroom)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∞–Ω—É–∑–ª–∞ 1 —ç—Ç–∞–∂–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.floor_1_restroom)
async def location_1_f1r(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_1_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.floor_2_corridor)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ—Ä–∏–¥–æ—Ä–∞ 2 —ç—Ç–∞–∂–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.floor_2_corridor)
async def location_1_f2c(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_1_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.floor_2_restroom)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∞–Ω—É–∑–ª–∞ 2 —ç—Ç–∞–∂–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.floor_2_restroom)
async def location_1_f2r(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_1_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.stairsl1)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–µ—Å—Ç–Ω–∏—Ü—ã. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.stairsl1)
async def location_1_st(message: types.Message, state: FSMContext, bot: Bot):
    
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_1_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.additional_photo)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )



#–í–¢–û–†–û–ô –ê–î–†–ï–°
@dp.message(CleaningFSM.room_1)
async def location_2_r1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_2_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.room_6)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ–º–Ω–∞—Ç—ã ‚Ññ6. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.room_6)
async def location_2_r6(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_2_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.restroom)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∞–Ω—É–∑–ª–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.restroom)
async def location_2_rr(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_2_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.stairsl2)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–µ—Å—Ç–Ω–∏—Ü—ã. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.stairsl2)
async def location_2_st(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_2_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.corridor)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ—Ä–∏–¥–æ—Ä–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )

@dp.message(CleaningFSM.corridor)
async def location_2_r1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photos.append('skip')
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_location_2_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            photos.append(file_path)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(photos=photos)
    await state.set_state(CleaningFSM.additional_photo)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=skip_keyboard(),
    )


@dp.message(CleaningFSM.additional_photo)
async def additional_photo_handler(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    add_photos = data.get("add_photos", [])

    if message.content_type == 'text' and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        add_photos.append('skip')
        await state.update_data(add_photos=add_photos)
        await state.set_state(CleaningFSM.consumabels)
        await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å",
        reply_markup=consumables_keyboard(),
    )
    elif message.content_type == 'photo':
        photo = message.photo[-1]
        file_path = f"photos/{message.from_user.id}_additional_{int(time.time())}.jpg"
        
        os.makedirs("photos", exist_ok=True)
        
        try:
            await bot.download(photo, destination=file_path)
            add_photos.append(file_path)
            await state.update_data(add_photos=add_photos)
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                reply_markup=skip_keyboard(),
            )
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

   


#–†–ê–°–•–û–î–ù–ò–ö–ò
@dp.message(CleaningFSM.consumabels)
async def handle_consumabels_choose(message: types.Message, state: FSMContext):
    consumable = message.text
    data = await state.get_data()
    consumables = data.get("consumables", [])

    if consumable == '–î–∞–ª–µ–µ':
        await state.update_data(consumables = consumables)
        await state.set_state(CleaningFSM.order)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—É–ø–∏—Ç—å", reply_markup=order_keyboard())
    else:
        if consumable in consumables:
            consumables.remove(consumable)
            await state.update_data(consumables = consumables)
            await message.answer("–≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: " + format_strings_as_column(consumables) + "–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ? –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –µ—â–µ —Ä–∞–∑", reply_markup=consumables_keyboard())
        else:
            consumables.append(consumable)
            await state.update_data(consumables = consumables)
            await message.answer("–≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: " + format_strings_as_column(consumables) + "–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ? –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –µ—â–µ —Ä–∞–∑", reply_markup=consumables_keyboard())          


#–ó–ê–ö–ê–ó–ê–¢–¨
@dp.message(CleaningFSM.order)
async def handle_order_selection(message: types.Message, state: FSMContext):
    to_order = message.text
    data = await state.get_data()
    order = data.get("order", {}) 

    if to_order == '–î–∞–ª–µ–µ':
        await state.update_data(order=order)
        await state.set_state(CleaningFSM.toRepair)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–ª–æ–º–∫–∏ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∏–º–µ—é—Ç—Å—è.",
            reply_markup=fixes_keyboard()
        )
    else:
        if to_order in order:
            print(str(data) + "\n 463 \n")
            del order[to_order]
            await state.update_data(order=order)
            print(str(data) + "\n 466 \n")

            order_list = "\n".join([f"{item}: {quantity}" for item, quantity in order.items()])
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏:\n{order_list}\n\n–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ? –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –µ—â–µ —Ä–∞–∑.",
                reply_markup=order_keyboard()
            )

        else:
            order[to_order] = None  
            await state.update_data(order=order)
            await state.update_data(current_order = to_order)
            print(str(data) + "\n 477 \n")
            await state.set_state(CleaningFSM.order_amount)
            await message.answer(
                f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞ '{to_order}', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                reply_markup=None 
            )

@dp.message(CleaningFSM.order_amount)
async def handle_order_amount(message: types.Message, state: FSMContext):
    amount_text = message.text
    if not amount_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞.")
        return

    amount = int(amount_text)
    data = await state.get_data()
    current_order = data.get("current_order")
    print(str(data) + "\n 495 \n")
    order = data.get("order", {})

    order[current_order] = amount
    await state.update_data(order=order)

    await state.set_state(CleaningFSM.order)

    order_list = "\n".join([f"{item}: {quantity}" for item, quantity in order.items()])
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏:\n{order_list}\n\n–ö–∞–∫–∏–µ –µ—â–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—É–ø–∏—Ç—å, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∏–º–µ—é—Ç—Å—è?",
        reply_markup=order_keyboard()
    )

 

#–ü–û–õ–û–ú–ö–ò
@dp.message(CleaningFSM.toRepair)
async def handle_fixes_choose(message: types.Message, state: FSMContext):
    toRepair = message.text
    data = await state.get_data()
    repair = data.get("repair", {})
    if toRepair == '–î–∞–ª–µ–µ':
        await state.update_data(repair=repair)
        await state.set_state(CleaningFSM.final)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ. –ù–∞ —ç—Ç–æ–º –≤—Å–µ.",
            reply_markup=final_keyboard()
        )
    else:
        if toRepair in repair:
            del repair[toRepair]
            await state.update_data(repair=repair)
            if repair:
                order_list = "\n".join([f"{key}: {'–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ' if value else '–ë–µ–∑ —Ñ–æ—Ç–æ'}" for key, value in repair.items()])
                await message.answer(
                    f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª–æ–º–∫–∏:\n{order_list}\n\n–ñ–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ?",
                    reply_markup=fixes_keyboard()
                )
            else:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–º–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    reply_markup=fixes_keyboard()
                )
        else:
            repair[toRepair] = None  
            await state.update_data(repair=repair)
            await state.update_data(toRepair = toRepair)
            await state.set_state(CleaningFSM.repair_photo)
            await message.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª–æ–º–∫–∏ '{toRepair}'.",
                reply_markup=None 
            )
             
@dp.message(CleaningFSM.repair_photo)
async def handle_fix_photo(message: types.Message, state: FSMContext, bot:Bot):
    data = await state.get_data()
    repair = data.get("repair", {})
    toRepair = data.get('toRepair')

    photo = message.photo[-1]
    file_path = f"photos/{message.from_user.id}_repair_{int(time.time())}.jpg"
        
    os.makedirs("photos", exist_ok=True)
        
    try:
        await bot.download(photo, destination=file_path)
        repair[toRepair] = file_path
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(repair=repair)
    await state.set_state(CleaningFSM.toRepair)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–µ—Ç–µ –µ—â–µ –ø–æ–ª–æ–º–∫–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—å—Å—è",
        reply_markup=fixes_keyboard(),
    )
              



@dp.message(CleaningFSM.final)
async def handle_consumabels_choose(message: types.Message, state: FSMContext):
    current_datetime = datetime.now()
    formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M:%S")
    await state.update_data(finishTime = formatted_datetime)
    data = await state.get_data()
    print(str(data))
    t_id = message.from_user.id
    user = await db_manager.get_user_by_telegram_id(t_id)
    phone = user['phone_number']
    print(phone)


    await db_manager.add_task(
    str(phone),
    str(t_id), 
    data.get('chosen_building', ""), 
    json.dumps(data.get('photos', [])), 
    json.dumps(data.get('add_photos', [])),  
    json.dumps(data.get('consumables', [])),  
    json.dumps(data.get('order', {})), 
    json.dumps(data.get('repair', {})),  
    data.get('startTime', ""), 
    data.get('finishTime', ""),  
    True
)



    await message.answer("–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!", reply_markup=start_cleaning_button())
    await state.clear() 


async def main():
    await db_manager.initialize()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())